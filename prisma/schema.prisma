generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  name               String
  email              String        @unique
  isAccountConfirmed Boolean       @default(false)
  password           String
  role               String
  tokens             Float         @default(0)
  subscription       Subscription?
  chats              Chat[]
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  @@index([email])
  @@map("users")
}

model Subscription {
  id                   String   @id @default(cuid())
  vendorSubscriptionId String   @map("vendor_subscription_id")
  vendorCustomerId     String   @unique @map("vendor_customer_id")
  vendorProductId      String   @map("vendor_product_id")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String   @unique @map("user_id")
  status               String
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model Chat {
  id         String    @id @default(cuid())
  name       String    @unique
  type       String // quick_search, legal_research, drafting_legal_documents
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String    @map("owner_id")
  messages   Message[]
  deletedAt  DateTime? @map("deleted_at")
  archivedAt DateTime? @map("archived_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([ownerId, name])
  @@map("chats")
}

model Message {
  id        String     @id @default(cuid())
  content   String
  chat      Chat       @relation(fields: [chatId], references: [id])
  chatId    String
  responses Response[]
  deletedAt DateTime?  @map("deleted_at")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@index([chatId])
  @@map("messages")
}

model Response {
  id        String   @id @default(cuid())
  content   String
  model     String // gemini-1.5-flash, gemini-1.5-pro, gemini-1.0-pro
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([messageId])
  @@map("responses")
}
